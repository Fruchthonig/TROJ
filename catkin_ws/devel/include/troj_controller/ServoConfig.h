// Generated by gencpp from file troj_controller/ServoConfig.msg
// DO NOT EDIT!


#ifndef TROJ_CONTROLLER_MESSAGE_SERVOCONFIG_H
#define TROJ_CONTROLLER_MESSAGE_SERVOCONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace troj_controller
{
template <class ContainerAllocator>
struct ServoConfig_
{
  typedef ServoConfig_<ContainerAllocator> Type;

  ServoConfig_()
    : servo(0)
    , center(0)
    , range(0)
    , direction(0)  {
    }
  ServoConfig_(const ContainerAllocator& _alloc)
    : servo(0)
    , center(0)
    , range(0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef int16_t _servo_type;
  _servo_type servo;

   typedef int16_t _center_type;
  _center_type center;

   typedef int16_t _range_type;
  _range_type range;

   typedef int16_t _direction_type;
  _direction_type direction;




  typedef boost::shared_ptr< ::troj_controller::ServoConfig_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::troj_controller::ServoConfig_<ContainerAllocator> const> ConstPtr;

}; // struct ServoConfig_

typedef ::troj_controller::ServoConfig_<std::allocator<void> > ServoConfig;

typedef boost::shared_ptr< ::troj_controller::ServoConfig > ServoConfigPtr;
typedef boost::shared_ptr< ::troj_controller::ServoConfig const> ServoConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::troj_controller::ServoConfig_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::troj_controller::ServoConfig_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace troj_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'troj_controller': ['/home/tobias/catkin_ws/src/troj_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::troj_controller::ServoConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::troj_controller::ServoConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::troj_controller::ServoConfig_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::troj_controller::ServoConfig_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::troj_controller::ServoConfig_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::troj_controller::ServoConfig_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::troj_controller::ServoConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d258bdc7108a9660981de680cfa4372d";
  }

  static const char* value(const ::troj_controller::ServoConfig_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd258bdc7108a9660ULL;
  static const uint64_t static_value2 = 0x981de680cfa4372dULL;
};

template<class ContainerAllocator>
struct DataType< ::troj_controller::ServoConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "troj_controller/ServoConfig";
  }

  static const char* value(const ::troj_controller::ServoConfig_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::troj_controller::ServoConfig_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the ServoConfig message is used to assign specific configuration\n\
# data to a servo. the data is needed to normalize servos to\n\
# common values to isolate variations from the rest of the user's\n\
# robot motion code. \n\
\n\
int16 servo\n\
int16 center\n\
int16 range\n\
int16 direction\n\
";
  }

  static const char* value(const ::troj_controller::ServoConfig_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::troj_controller::ServoConfig_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo);
      stream.next(m.center);
      stream.next(m.range);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoConfig_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::troj_controller::ServoConfig_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::troj_controller::ServoConfig_<ContainerAllocator>& v)
  {
    s << indent << "servo: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo);
    s << indent << "center: ";
    Printer<int16_t>::stream(s, indent + "  ", v.center);
    s << indent << "range: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range);
    s << indent << "direction: ";
    Printer<int16_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TROJ_CONTROLLER_MESSAGE_SERVOCONFIG_H
